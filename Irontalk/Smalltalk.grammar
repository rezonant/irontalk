/*
 * Smalltalk.grammar
 * Copyright © 2010 William Lahti.
 */

%header%

GRAMMARTYPE = "LL"
DESCRIPTION = "A grammar for Smalltalk"
AUTHOR      = "William Lahti <wilahti@gmail.com>"
VERSION     = "1.0"
DATE        = "2010/11/23"
LICENSE     = "Permission is granted to copy this document verbatim in any
               medium, provided that this copyright notice is left intact."
COPYRIGHT   = "Copyright © 2010 William Lahti"

%tokens%

IDENT               = <<[a-zA-Z_][a-zA-Z0-9_]*>>
KEYWORD             = <<[a-zA-Z_][a-zA-Z0-9_]*:>>
SELECTOR			= <<([a-zA-Z_][a-zA-Z0-9_]*:?)+>>

STRING              = <<('.*[^\\]')>>
DOC                 = <<(".*[^\\]")>> %ignore%
CHAR_LITERAL		= <<\$.>>
NUM_LITERAL         = <<[0-9]+|[0-9]*\.[0-9]+>>
LINE_IGNORE         = <<(//.*$)>> %ignore%
IGNORE              = <</\*([^*]|\*[^/])*\*/>> %ignore%
S                   = <<[ \t\n\r\f]+>> %ignore%
HASH		        = "#"
LEFT_PAREN          = "("
RIGHT_PAREN         = ")"
LEFT_BRACKET        = "["
RIGHT_BRACKET       = "]"
LEFT_BRACE          = "{"
RIGHT_BRACE         = "}"
COLON               = ":"
SEMI_COLON          = ";"
VAR_DELIM			= "|"
DOT					= "."
BINARY			    = <<[,=~-\+/\*!@\$%^&<>\?]+>>
ASSIGN				= ":="


%productions%

sequence			= var_def? statement+ ;
statement			= '.' | expression '.'*;
symbol_literal		= '#' ( IDENT | BINARY | SELECTOR ) ;
var_def				= '|' IDENT+ '|' ;
block_params		= ( ( ':' IDENT )+ '|' ) ;
block_literal		= '[' block_params? sequence? ']' ;
array_literal		= '{' ( expression ( '.' expression )* '.'? )? '}' ;

word_array_literal	= '#' '(' 
					  ( IDENT | STRING | NUM_LITERAL | CHAR_LITERAL | '#' ( IDENT | word_array_literal ) )*
					  ')' ;
// WORD_ARRAY_LITERAL	= <<#\(([a-zA-Z_][a-zA-Z0-9_:]\s+)*\)>>

receiver			= IDENT | symbol_literal | STRING | NUM_LITERAL | CHAR_LITERAL | 
					  word_array_literal | block_literal | array_literal |
					  '(' expression ')' ;
binary_send			= BINARY receiver unary_send* ;
keyword_send		= ( KEYWORD receiver simple_send* )+;
expression			= receiver message* ( ';' message )*;
unary_send			= IDENT ;
simple_send			= unary_send | binary_send ;
assign_send			= ':=' expression ;
message				= ( simple_send | keyword_send | assign_send );